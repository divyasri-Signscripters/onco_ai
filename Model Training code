import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import models, transforms
from torch.utils.data import DataLoader, Dataset
import os
import cv2

#  Check if CUDA is available
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

#  Data Augmentation & Preprocessing
transform = transforms.Compose([
    transforms.ToPILImage(),
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.5], std=[0.5])
])

#  Custom Dataset Class
class BrainCancerDataset(Dataset):
    def _init_(self, image_paths, labels, transform=None):
        self.image_paths = image_paths
        self.labels = labels
        self.transform = transform

    def _len_(self):
        return len(self.image_paths)

    def _getitem_(self, idx):
        img = cv2.imread(self.image_paths[idx], cv2.IMREAD_GRAYSCALE)
        img = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)  # Convert grayscale to RGB

        if self.transform:
            img = self.transform(img)

        label = self.labels[idx]
        return img, label

# Function to Load Data
def load_brain_cancer_data(data_path, categories):
    image_paths = []
    labels = []
    for label, category in enumerate(categories):
        folder = os.path.join(data_path, category)
        for img_file in os.listdir(folder):
            if img_file.endswith(('.jpg', '.png')):
                image_paths.append(os.path.join(folder, img_file))
                labels.append(label)
    return image_paths, labels

#  Define Dataset Path & Categories
data_path = r"D:\Data sets\Brain Cancer"
brain_categories = ["brain_glioma", "brain_menin", "brain_tumor"]

#  Load Data
image_paths, labels = load_brain_cancer_data(data_path, brain_categories)

#  Create Dataset & DataLoader
dataset = BrainCancerDataset(image_paths, labels, transform=transform)
dataloader = DataLoader(dataset, batch_size=16, shuffle=True)

# Define Model (Using DenseNet for better performance)
class BrainTumorClassifier(nn.Module):
    def _init_(self, num_classes):
        super(BrainTumorClassifier, self)._init_()
        self.model = models.densenet121(pretrained=True)
        self.model.classifier = nn.Linear(1024, num_classes)

    def forward(self, x):
        return self.model(x)

# Train Model
def train_brain_model():
    print(f" Training Brain Cancer Model...")

    # Model, Loss, Optimizer
    num_classes = len(brain_categories)
    model = BrainTumorClassifier(num_classes).to(device)
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.Adam(model.parameters(), lr=0.001)

    # Training Loop
    num_epochs = 10
    for epoch in range(num_epochs):
        model.train()
        total_loss = 0
        correct = 0
        total = 0

        for images, labels in dataloader:
            images, labels = images.to(device), labels.to(device)
            labels = labels.view(-1)  # Ensure 1D labels

            optimizer.zero_grad()
            outputs = model(images)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()

            total_loss += loss.item()
            _, predicted = outputs.max(1)
            correct += (predicted == labels).sum().item()
            total += labels.size(0)

        accuracy = 100 * correct / total
        print(f"Epoch [{epoch+1}/{num_epochs}] â†’ Loss: {total_loss:.4f} | Accuracy: {accuracy:.2f}%")

    # Save Model
    model_save_path = "Brain_Cancer_Model.pth"
    torch.save(model.state_dict(), model_save_path)
    print(f"Brain Cancer Model Saved: {model_save_path}")

#  Run Training
train_brain_model()
